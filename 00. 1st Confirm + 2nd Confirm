// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ivandavidov13

//@version=5
strategy('2024/08/19 - 1st Confirm + 2nd Confirm', overlay=true, currency=currency.USD, initial_capital=25000, pyramiding=1)

//==============================================================================
//INSERT SECTION
//This section is where users will be required to insert the indicators they
//would like to use for their NNFX Strategy.
//==============================================================================
//INSERT - CONFIRMATION INDICATOR 1
//==============================================================================
//Insert indicator variables
// Inputs
Length = input(9, title="Period of Evaluation")
Smooth = input(3, title="Period of Smoothing")
show_histo = input(true, title="Show Histogram")
ash_src = input(close, title="Source")
Mode = input.string(title="Indicator Method", defval="RSI", options=["RSI", "STOCHASTIC", "ADX"])
ash_ma_type = input.string(title="MA", defval="WMA", options=["ALMA", "EMA", "WMA", "SMA", "SMMA", "HMA"])
ash_alma_offset = input.float(defval=0.85, title="* Arnaud Legoux (ALMA) Only - Offset Value", minval=0, step=0.01)
ash_alma_sigma = input.float(defval=6, title="* Arnaud Legoux (ALMA) Only - Sigma Value", minval=0)

// Moving average function
ash_ma(type, ash_src, len) =>
    float result = 0.0
    switch type
        "SMA" => result := ta.sma(ash_src, len)
        "EMA" => result := ta.ema(ash_src, len)
        "WMA" => result := ta.wma(ash_src, len)
        "SMMA" => 
            float w = ta.wma(ash_src, len)
            result := na(w[1]) ? ta.sma(ash_src, len) : (w[1] * (len - 1) + ash_src) / len
        "HMA" => result := ta.wma(2 * ta.wma(ash_src, len / 2) - ta.wma(ash_src, len), math.round(math.sqrt(len)))
        "ALMA" => result := ta.alma(ash_src, len, ash_alma_offset, ash_alma_sigma)
    result

// Calculations
Price = ash_src
Price1 = ash_ma("SMA", Price, 1)
Price2 = ash_ma("SMA", Price[1], 1)

// RSI
Bulls0 = 0.5 * (math.abs(Price1 - Price2) + (Price1 - Price2))
Bears0 = 0.5 * (math.abs(Price1 - Price2) - (Price1 - Price2))

// Stochastic
Bulls1 = Price1 - ta.lowest(Price1, Length)
Bears1 = ta.highest(Price1, Length) - Price1

// ADX
Bulls2 = 0.5 * (math.abs(high - high[1]) + (high - high[1]))
Bears2 = 0.5 * (math.abs(low[1] - low) + (low[1] - low))

// Select bulls and bears based on the selected mode
Bulls = switch Mode
    "RSI" => Bulls0
    "STOCHASTIC" => Bulls1
    => Bulls2 // ADX

Bears = switch Mode
    "RSI" => Bears0
    "STOCHASTIC" => Bears1
    => Bears2 // ADX

AvgBulls = ash_ma(ash_ma_type, Bulls, Length)
AvgBears = ash_ma(ash_ma_type, Bears, Length)

// Smoothing
SmthBulls = ash_ma(ash_ma_type, AvgBulls, Smooth)
SmthBears = ash_ma(ash_ma_type, AvgBears, Smooth)

// Difference
difference = math.abs(SmthBulls - SmthBears)

// Colors
bull_trend_color = SmthBulls < SmthBulls[1] ? color.lime : color.green
bear_trend_color = SmthBears < SmthBears[1] ? color.orange : color.red

difference_color = difference > SmthBulls ? (SmthBears < SmthBears[1] ? color.orange : color.red) : 
                 difference > SmthBears ? (SmthBulls < SmthBulls[1] ? color.lime : color.green) : color.gray

// Plots
plot(difference, style=plot.style_histogram, linewidth=3, color=show_histo ? difference_color : na, transp=45, title="Strength")

ash_A = plot(SmthBulls, color=bull_trend_color, linewidth=4, transp=0)
ash_aB = plot(SmthBears, color=bear_trend_color, linewidth=4, transp=0)
// fill(A, B, color=trend == 1 ? color.aqua : color.fuchsia, transp=80) // Uncomment and define 'trend' logic to use this


//Insert indicator conditions as Trigger
C1_L_Trigger = ta.crossover(SmthBulls,  SmthBears)
C1_S_Trigger = ta.crossunder(SmthBulls, SmthBears)

//==============================================================================
//INSERT - CONFIRMATION INDICATOR 2
//==============================================================================
//Insert indicator variables
src = input.source(title="Source", defval=close)

curtaLen = input.int(title="Curta (Short) Length", defval=3)
mediaLen = input.int(title="Media (Medium) Length", defval=8)
longaLen = input.int(title="Longa (Long) Length", defval=20) //20

ma_type = input.string(title="Didi Index MA", defval="SMA", options=["ALMA", "EMA", "WMA", "SMA", "SMMA", "HMA"])
alma_offset = input.float(defval=0.85, title="* Arnaud Legoux (ALMA) Only - Offset Value", minval=0, step=0.01)
alma_sigma = input.float(defval=6, title="* Arnaud Legoux (ALMA) Only - Sigma Value", minval=0)

show_filling = input.bool(true, title="Show Filling")

//QQE Trend Line
useQQE = input.int(title="QQE 1 or 2", defval=1, options=[1,2])
signal_len = input.int(defval=14, title="Signal Length")
smoothening = input.int(defval=5, title="Smoothening Length")
qqe_factor = input.float(defval=4.236, title="QQE Factor")

ma(type, src, len) =>
    float result = na
    if type == "SMA"
        result := ta.sma(src, len)
    if type == "EMA"
        result := ta.ema(src, len)
    if type == "WMA"
        result := ta.wma(src, len)
    if type == "SMMA"
        w = ta.wma(src, len)
        result := na(w[1]) ? ta.sma(src, len) : (w[1] * (len - 1) + src) / len
    if type == "HMA"
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    if type == "ALMA"
        result := ta.alma(src, len, alma_offset, alma_sigma)
    result

//Credits to Shizaru
qqeLine(src, len, sf, qqe) =>
    wildersper = len * 2 - 1
    rsima = ta.ema(src, sf)

    atr = math.abs(rsima[1] - rsima)
    maatrrsi = ta.ema(atr, wildersper)

    dar = ta.ema(maatrrsi, wildersper) * qqe

    trr = 0.0
    trr := rsima > nz(trr[1]) ? ((rsima - dar) < trr[1] ? trr[1] : (rsima - dar)) : ((rsima + dar) > trr[1] ? trr[1] : (rsima + dar))

//Credits to Glaz
qqeLine2(src, len, sf, qqe) =>
    Wilders_Period = len * 2 - 1

    RsiMa = ta.ema(src, sf)
    
    AtrRsi = math.abs(RsiMa[1] - RsiMa)
    MaAtrRsi = ta.ema(AtrRsi, Wilders_Period)
    dar = ta.ema(MaAtrRsi, Wilders_Period) * qqe
    
    longband = 0.0
    shortband = 0.0
    trend = 0
    
    DeltaFastAtrRsi = dar
    RSIndex = RsiMa
    newshortband = RSIndex + DeltaFastAtrRsi
    newlongband = RSIndex - DeltaFastAtrRsi
    longband := RSIndex[1] > longband[1] and RSIndex > longband[1] ? math.max(longband[1], newlongband) : newlongband
    shortband := RSIndex[1] < shortband[1] and RSIndex < shortband[1] ? math.min(shortband[1], newshortband) : newshortband
    trend := ta.crossover(RSIndex, shortband[1]) ? 1 : ta.crossover(longband[1], RSIndex) ? -1 : nz(trend[1], 1)
    FastAtrRsiTL = trend == 1 ? longband : shortband
    
    FastAtrRsiTL_plot = FastAtrRsiTL

media = ma(ma_type, src, mediaLen)
curta = ma(ma_type, src, curtaLen) - media
longa = ma(ma_type, src, longaLen) - media

plot(0, title="Media", color=color.gray, transp=0)
A = plot(curta, title="Curta", color=color.green, transp=0, linewidth=1)
B = plot(longa, title="Longa", color=color.red, transp=0, linewidth=1)

trendColor = show_filling ? (curta > longa ? color.lime : color.orange) : na
fill(A, B, color=trendColor, transp=80)

qqe_line = useQQE == 1 ? qqeLine(curta, signal_len, smoothening, qqe_factor) : qqeLine2(curta, signal_len, smoothening, qqe_factor)

qqeColor = qqe_line > 0 ? color.lime : color.orange

plot(qqe_line, color=qqeColor, linewidth=2, transp=20, style=plot.style_cross)

c_qqeline_cross_Long = ta.crossover(curta, qqe_line)
c_qqeline_cross_Short = ta.crossover(qqe_line, curta)

//Signals based on crossover
c_cross_Long = ta.crossover(curta, longa)
c_cross_Short = ta.crossover(longa, curta)

//Signals based on signal position
c_trend_Long = curta > longa ? 1 : 0
c_trend_Short = longa > curta ? 1 : 0

confirm_Long = c_cross_Long
confirm_Short = c_cross_Short

//Insert indicator conditions as filter
C2_L_Filter = curta > longa
C2_S_Filter = curta < longa

//==============================================================================
//INSERT - EXIT INDICATOR
//==============================================================================
//Insert indicator variables
//Using indicator 1 as exit indicator - no additional indicators to be inserted 
//in this example. If you wish to use another indicator, insert indicator here.

//Insert indicator conditions as exit trigger - in this example, using C1 as
//exit indicator. If you wish to use another indicator, insert indicator above,
//and provide trigger (either crossover or crossunder) conditions here.
Exit_L = C1_S_Trigger
Exit_S = C1_L_Trigger

//==============================================================================
//COMPLETED SECTION
//This section has been optimised to work with the above indicators the user
//has inserted above. The user does not require to change any code below and
//is completed and optimised for the full NNFX strategy. Users may wish to 
//customise this section of code if they wish to alter the NNFX strategy.
//==============================================================================
//COMPLETE - BACKTEST DATE RANGE
//==============================================================================
//Define variables
Start_D = input.int (   1, "Start Day",   1, 31)
Start_M = input.int (   1, "Start Month", 1, 12)
Start_Y = input.int (2014, "Start Year"        )
End_D   = input.int (   1, "End Day",     1, 31)
End_M   = input.int (   1, "End Month",   1, 12)
End_Y   = input.int (2024, "End Year"          )

//Define start and end time stamps
Start_Date = timestamp(Start_Y, Start_M, Start_D, 00, 00, 00)
End_Date   = timestamp(End_Y,     End_M,   End_D, 00, 00, 00)

//Date Range Condition
Date_Range() =>
    if time >= Start_Date and time <= End_Date
        true
    else
        false

//==============================================================================
//COMPLETE - ATR MONEY MANAGEMENT
//==============================================================================
//Declair money management variables
Risk_Percent     = input.float(title='Percent Risk Per Trade', defval=0.02, minval=0.001, maxval=1)
Atr_Multi_Loss   = input.float(title='Atr Loss Multiple',      defval=1.5,  minval=0.1, step=0.1)

//ATR indicator
Atr_length = input.int(title="ATR Length", defval=14, minval=1)
Atr_smoothing = input.string(title="ATR Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	switch Atr_smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)

Atr = ma_function(ta.tr(true), Atr_length)

//Calculate position size based off initial account capital, risk per trade and atr distance
Position_Size = math.round(strategy.initial_capital * Risk_Percent / (Atr_Multi_Loss * Atr))

//==============================================================================
//COMPLETE - ENTRY CONDITIONS
//==============================================================================
//Insert Long and Short conditions for C1 Trigger, all other indicators are filters
Condition_L_1 = strategy.position_size <= 0 and Date_Range() and C1_L_Trigger
Condition_S_1 = strategy.position_size >= 0 and Date_Range() and C1_S_Trigger

//Plot long and short conditions
plotshape(Condition_L_1, color=color.rgb(255, 0, 255), style=shape.labelup,   location=location.belowbar)
plotshape(Condition_S_1, color=color.rgb(255, 0, 255), style=shape.labeldown, location=location.abovebar)

//==============================================================================
//COMPLETE - ENTRY ORDERS
//==============================================================================
//Compile all long and short entry conditions
Entry_Long  = Condition_L_1 and C2_L_Filter
Entry_Short = Condition_S_1 and C2_S_Filter

//Submit long and short orders based on entry conditions
if Entry_Long
    strategy.entry(id='Entry_L_1', comment = "Long Entry",  direction=strategy.long,  qty=Position_Size)
    
if Entry_Short
    strategy.entry(id='Entry_S_1', comment = "Short Entry", direction=strategy.short, qty=Position_Size)

//==============================================================================
//COMPLETE - TAKE PROFIT AND STOP LOSS CONDITIONS
//==============================================================================
//Store Price on new entry signal
Entry_Price = strategy.opentrades.entry_price(strategy.opentrades - 1)

//Store ATR value on new entry signal
Entry_Atr = float(0.0)
if strategy.position_size == 0 or Entry_Long or Entry_Short
    Entry_Atr := Atr
else
    Entry_Atr := Entry_Atr[1]

//Calculate stop loss distance (in price)
Risk_Loss   = Entry_Atr * Atr_Multi_Loss 

// Stop loss level calculation
Stop_L = float(na)
Stop_S = float(na)

if strategy.position_size > 0  // For Long Trades
    Stop_L := Entry_Price - Risk_Loss
else
    Stop_L := na

if strategy.position_size < 0  // For Short Trades
    Stop_S := Entry_Price + Risk_Loss
else
    Stop_S := na

// Plot profit and stop loss levels for long and short trades
plot(Stop_L, color=color.red, style=plot.style_linebr, linewidth=2)
plot(Stop_S, color=color.red, style=plot.style_linebr, linewidth=2)

//==============================================================================
//COMPLETE - EXIT ORDERS
//==============================================================================
// Exit long trades
strategy.exit(id = 'Exit_L_1', from_entry ='Entry_L_1', comment='STOP LOSS', stop = Stop_L)

// Exit short trades
strategy.exit(id = 'Exit_S_1', from_entry ='Entry_S_1', comment='STOP LOSS', stop = Stop_S)

//==============================================================================
//COMPLETE - CLOSE ORDERS
//==============================================================================
// Close long trades
if Exit_L
    strategy.close(id='Entry_L_1', comment='EXIT INDICATOR')

// Close short trades
if Exit_S
    strategy.close(id='Entry_S_1', comment='EXIT INDICATOR')

//==============================================================================
