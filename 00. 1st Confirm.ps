// This source code is subject to the terms of the Mozilla Public License 2.0 
//at https://mozilla.org/MPL/2.0/
// Â© Ivan Davidov

//==============================================================================
//@version=5
strategy('Testing 1st Confirm', overlay=true, currency=currency.USD, initial_capital=25000, pyramiding=2)

//==============================================================================
//INSERT SECTION
//This section is where users will be required to insert the indicators they
//would like to use for their NNFX Strategy.
//==============================================================================
//INSERT - CONFIRMATION INDICATOR 1
//==============================================================================
length = input.int(20, minval=1)
src = input(hlc3, title="Source")
ma = ta.sma(src, length)
cci = (src - ma) / (0.015 * ta.dev(src, length))
plot(cci, "CCI", color=#2962FF)
band1 = hline(100, "Upper Band", color=#787B86, linestyle=hline.style_dashed)
hline(0, "Middle Band", color=color.new(#787B86, 50))
band0 = hline(-100, "Lower Band", color=#787B86, linestyle=hline.style_dashed)
fill(band1, band0, color=color.rgb(33, 150, 243, 90), title="Background")

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

smoothingLine = ma(cci, smoothingLength, typeMA)
plot(smoothingLine, title="Smoothing Line", color=#f37f20, display=display.none)


//Insert indicator conditions as Trigger
C1_L_Trigger = ta.crossover(cci,  0)
C1_S_Trigger = ta.crossunder(cci, 0)

//==============================================================================
//COMPLETED SECTION
//This section has been optimised to work with the above indicators the user
//has inserted above. The user does not require to change any code below and
//is completed and optimised for the full NNFX strategy. Users may wish to 
//customise this section of code if they wish to alter the NNFX strategy.
//==============================================================================
//COMPLETE - BACKTEST DATE RANGE
//==============================================================================
//Define variables
Start_D = input.int (   1, "Start Day",   1, 31)
Start_M = input.int (   1, "Start Month", 1, 12)
Start_Y = input.int (2014, "Start Year"        )
End_D   = input.int (   1, "End Day",     1, 31)
End_M   = input.int (   1, "End Month",   1, 12)
End_Y   = input.int (2024, "End Year"          )

//Define start and end time stamps
Start_Date = timestamp(Start_Y, Start_M, Start_D, 00, 00, 00)
End_Date   = timestamp(End_Y,     End_M,   End_D, 00, 00, 00)

//Date Range Condition
Date_Range() =>
    if time >= Start_Date and time <= End_Date
        true
    else
        false

//==============================================================================
//COMPLETE - ATR MONEY MANAGEMENT
//==============================================================================
//Declair money management variables
Risk_Percent     = input.float(title='Percent Risk Per Trade', defval=0.02, minval=0.001, maxval=1)
Atr_Multi_Profit = input.float(title='Atr Profit Multiple',    defval=1.0,  minval=0.1, step=0.1)
Atr_Multi_Loss   = input.float(title='Atr Loss Multiple',      defval=1.5,  minval=0.1, step=0.1)

//ATR indicator
Atr_length = input.int(title="ATR Length", defval=14, minval=1)
Atr_smoothing = input.string(title="ATR Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	switch Atr_smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)

Atr = ma_function(ta.tr(true), Atr_length)

//Calculate position size based off initial account capital, risk per trade and atr distance
Position_Size = math.round(strategy.initial_capital * Risk_Percent / (Atr_Multi_Loss * Atr) / 1)

//==============================================================================
//COMPLETE - USER INPUT CONDITIONS - C1
//==============================================================================
//Allow user to select whether they would like to use C1 indicator as trigger
Input_C1_Trigger = input(true, title='Use C1 as Trigger?')

if Input_C1_Trigger == false
    C1_L_Trigger := false
    C1_S_Trigger := false

//==============================================================================
//COMPLETE - ENTRY CONDITIONS
//==============================================================================
//Insert Long and Short conditions for C1 Trigger, all other indicators are filters
Condition_L_1 = strategy.position_size <= 0 and Date_Range() and C1_L_Trigger
Condition_S_1 = strategy.position_size >= 0 and Date_Range() and C1_S_Trigger

//Plot long and short conditions
plotshape(Condition_L_1, color=color.orange, style=shape.labelup,   location=location.belowbar)
plotshape(Condition_S_1, color=color.orange, style=shape.labeldown, location=location.abovebar)

//==============================================================================
//COMPLETE - ENTRY ORDERS
//==============================================================================
//Compile all long and short entry conditions
Entry_Long  = Condition_L_1
Entry_Short = Condition_S_1

//Submit long and short orders based on entry conditions
if Entry_Long
    strategy.entry(id='Entry_L_1', comment = "Long Entry 1",  direction=strategy.long,  qty=Position_Size)
    
if Entry_Short
    strategy.entry(id='Entry_S_1', comment = "Short Entry 1", direction=strategy.short, qty=Position_Size)

//==============================================================================
//COMPLETE - TAKE PROFIT AND STOP LOSS CONDITIONS
//==============================================================================
//Store Price on new entry signal
Entry_Price = strategy.opentrades.entry_price(strategy.opentrades - 1)

//Store ATR value on new entry signal
Entry_Atr = float(0.0)
if strategy.position_size == 0 or Entry_Long or Entry_Short
    Entry_Atr := Atr
else
    Entry_Atr := Entry_Atr[1]

//Calculate stop loss and take profit distance (in price)
Risk_Profit = Entry_Atr * Atr_Multi_Profit
Risk_Loss   = Entry_Atr * Atr_Multi_Loss 

//For Long Trades, find the profit level
Profit_L = float(0.0)
if strategy.position_size >= 0 and strategy.opentrades == 2
    Profit_L := Entry_Price + Risk_Profit
else
    Profit_L := na

//For Long Trades, find the stop loss level
Stop_L = float(0.0)
if strategy.position_size >= 0
    if strategy.opentrades == 2 or Entry_Long
        Stop_L := Entry_Price - Risk_Loss
    else if strategy.opentrades == 1
        Stop_L := math.max(nz(Stop_L[1], 0), close - Risk_Loss, Entry_Price + 0.001)
    else
        Stop_L := na
else
    Stop_L := na

//For Short Trades, find the profit level
Profit_S = float(0.0)
if strategy.position_size <= 0 and strategy.opentrades == 2
    Profit_S := Entry_Price - Risk_Profit
else
    Profit_S := na

//For Short Trades, find the stop loss level
Stop_S = float(0.0)
if strategy.position_size <= 0
    if strategy.opentrades == 2 or Entry_Short
        Stop_S := Entry_Price + Risk_Loss
    else if strategy.opentrades == 1
        Stop_S := math.min(nz(Stop_S[1], 10000000), close + Risk_Loss, Entry_Price - 0.001)
    else
        Stop_S := na
else
    Stop_S := na

//Plot profit and stop loss levels for long and short trades
plot(Profit_L, color=color.lime, style=plot.style_linebr, linewidth=2)
plot(Stop_L,   color=color.red,  style=plot.style_linebr, linewidth=2)
plot(Profit_S, color=color.lime, style=plot.style_linebr, linewidth=2)
plot(Stop_S,   color=color.red,  style=plot.style_linebr, linewidth=2)

//==============================================================================
//COMPLETE - EXIT ORDERS
//==============================================================================
//Exit long trades
strategy.exit(id = 'Exit_L_1', from_entry ='Entry_L_1', comment='Long Exit 1',  stop = Stop_L, limit = Profit_L)

//Exit short trades
strategy.exit(id = 'Exit_S_1', from_entry ='Entry_S_1', comment='Short Exit 1', stop = Stop_S, limit = Profit_S)
