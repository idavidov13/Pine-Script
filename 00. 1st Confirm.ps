// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ivandavidov13

//@version=5
strategy('NNFX Strategy Template', overlay=true, currency=currency.USD, initial_capital=25000, pyramiding=1)

//==============================================================================
//INSERT SECTION
//This section is where users will be required to insert the indicators they
//would like to use for their NNFX Strategy.
//==============================================================================
//INSERT - CONFIRMATION INDICATOR 1
//==============================================================================
//Insert indicator variables
Aroon_length = input.int(14, title="Aroon Length", minval=1)
Aroon_upper = 100 * (ta.highestbars(high, Aroon_length) + Aroon_length)/Aroon_length
Aroon_lower = 100 * (ta.lowestbars(low, Aroon_length) + Aroon_length)/Aroon_length

//Insert indicator conditions as Trigger
C1_L_Trigger = ta.crossover(Aroon_upper,  Aroon_lower)
C1_S_Trigger = ta.crossunder(Aroon_upper, Aroon_lower)


//==============================================================================
//INSERT - EXIT INDICATOR
//==============================================================================
//Insert indicator variables
//Using indicator 1 as exit indicator - no additional indicators to be inserted 
//in this example. If you wish to use another indicator, insert indicator here.

//Insert indicator conditions as exit trigger - in this example, using C1 as
//exit indicator. If you wish to use another indicator, insert indicator above,
//and provide trigger (either crossover or crossunder) conditions here.
Exit_L = C1_S_Trigger
Exit_S = C1_L_Trigger

//==============================================================================
//COMPLETED SECTION
//This section has been optimised to work with the above indicators the user
//has inserted above. The user does not require to change any code below and
//is completed and optimised for the full NNFX strategy. Users may wish to 
//customise this section of code if they wish to alter the NNFX strategy.
//==============================================================================
//COMPLETE - BACKTEST DATE RANGE
//==============================================================================
//Define variables
Start_D = input.int (   1, "Start Day",   1, 31)
Start_M = input.int (   1, "Start Month", 1, 12)
Start_Y = input.int (2014, "Start Year"        )
End_D   = input.int (   1, "End Day",     1, 31)
End_M   = input.int (   1, "End Month",   1, 12)
End_Y   = input.int (2024, "End Year"          )

//Define start and end time stamps
Start_Date = timestamp(Start_Y, Start_M, Start_D, 00, 00, 00)
End_Date   = timestamp(End_Y,     End_M,   End_D, 00, 00, 00)

//Date Range Condition
Date_Range() =>
    if time >= Start_Date and time <= End_Date
        true
    else
        false

//==============================================================================
//COMPLETE - ATR MONEY MANAGEMENT
//==============================================================================
//Declair money management variables
Risk_Percent     = input.float(title='Percent Risk Per Trade', defval=0.02, minval=0.001, maxval=1)
Atr_Multi_Loss   = input.float(title='Atr Loss Multiple',      defval=1.5,  minval=0.1, step=0.1)

//ATR indicator
Atr_length = input.int(title="ATR Length", defval=14, minval=1)
Atr_smoothing = input.string(title="ATR Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	switch Atr_smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)

Atr = ma_function(ta.tr(true), Atr_length)

//Calculate position size based off initial account capital, risk per trade and atr distance
Position_Size = math.round(strategy.initial_capital * Risk_Percent / (Atr_Multi_Loss * Atr))

//==============================================================================
//COMPLETE - ENTRY CONDITIONS
//==============================================================================
//Insert Long and Short conditions for C1 Trigger, all other indicators are filters
Condition_L_1 = strategy.position_size <= 0 and Date_Range() and C1_L_Trigger
Condition_S_1 = strategy.position_size >= 0 and Date_Range() and C1_S_Trigger

//Plot long and short conditions
plotshape(Condition_L_1, color=color.rgb(255, 0, 255), style=shape.labelup,   location=location.belowbar)
plotshape(Condition_S_1, color=color.rgb(255, 0, 255), style=shape.labeldown, location=location.abovebar)

//==============================================================================
//COMPLETE - ENTRY ORDERS
//==============================================================================
//Compile all long and short entry conditions
Entry_Long  = Condition_L_1
Entry_Short = Condition_S_1

//Submit long and short orders based on entry conditions
if Entry_Long
    strategy.entry(id='Entry_L_1', comment = "Long Entry",  direction=strategy.long,  qty=Position_Size)
    
if Entry_Short
    strategy.entry(id='Entry_S_1', comment = "Short Entry", direction=strategy.short, qty=Position_Size)

//==============================================================================
//COMPLETE - TAKE PROFIT AND STOP LOSS CONDITIONS
//==============================================================================
//Store Price on new entry signal
Entry_Price = strategy.opentrades.entry_price(strategy.opentrades - 1)

//Store ATR value on new entry signal
Entry_Atr = float(0.0)
if strategy.position_size == 0 or Entry_Long or Entry_Short
    Entry_Atr := Atr
else
    Entry_Atr := Entry_Atr[1]

//Calculate stop loss distance (in price)
Risk_Loss   = Entry_Atr * Atr_Multi_Loss 

// Stop loss level calculation
Stop_L = float(na)
Stop_S = float(na)

if strategy.position_size > 0  // For Long Trades
    Stop_L := Entry_Price - Risk_Loss
else
    Stop_L := na

if strategy.position_size < 0  // For Short Trades
    Stop_S := Entry_Price + Risk_Loss
else
    Stop_S := na

// Plot profit and stop loss levels for long and short trades
plot(Stop_L, color=color.red, style=plot.style_linebr, linewidth=2)
plot(Stop_S, color=color.red, style=plot.style_linebr, linewidth=2)

//==============================================================================
//COMPLETE - EXIT ORDERS
//==============================================================================
// Exit long trades
strategy.exit(id = 'Exit_L_1', from_entry ='Entry_L_1', comment='STOP LOSS', stop = Stop_L)

// Exit short trades
strategy.exit(id = 'Exit_S_1', from_entry ='Entry_S_1', comment='STOP LOSS', stop = Stop_S)

//==============================================================================
//COMPLETE - CLOSE ORDERS
//==============================================================================
// Close long trades
if Exit_L
    strategy.close(id='Entry_L_1', comment='EXIT INDICATOR')

// Close short trades
if Exit_S
    strategy.close(id='Entry_S_1', comment='EXIT INDICATOR')

//==============================================================================
